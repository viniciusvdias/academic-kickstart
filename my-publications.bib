% Encoding: UTF-8

@InProceedings{dias2019fractal,
  author    = {Dias, Vinicius and Teixeira, Carlos H. C. and Guedes, Dorgival and Meira Jr., Wagner and Parthasarathy, Srinivasan},
  title     = {Fractal: A General-Purpose Graph Pattern Mining System},
  booktitle = {Proceedings of the 2019 International Conference on Management of Data},
  year      = {2019},
  series    = {SIGMOD '19},
  pages     = {1357--1374},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {3319875},
  doi       = {10.1145/3299869.3319875},
  isbn      = {978-1-4503-5643-5},
  keywords  = {distributed systems, graph pattern mining},
  location  = {Amsterdam, Netherlands},
  numpages  = {18},
  url       = {http://doi.acm.org/10.1145/3299869.3319875},
}

@Article{dias2018janus,
  author   = {Vinicius Dias and Wagner Meira and Dorgival Guedes},
  title    = {Janus: Diagnostics and reconfiguration of data parallel programs},
  journal  = {Journal of Parallel and Distributed Computing},
  year     = {2018},
  volume   = {120},
  pages    = {196 - 210},
  issn     = {0743-7315},
  abstract = {The increasing amount of data being stored and the variety of algorithms proposed to meet processing demands of the data scientists have led to a new generation of computational environments and paradigms. These environments simplify the task of programmers, but achieving the ideal performance continues to be a challenge. In this work we investigate important factors concerning the performance of common big-data applications and consider the Spark framework as the target for our contributions. Based on that, we present the design and implementation of Janus, a tool that automates the reconfiguration of Spark applications. It leverages logs from previous executions as input, enforces configurable adjustment policies over the collected statistics and makes its decisions taking into account communication behaviors specific of the application evaluated. In order to accomplish that, Janus identifies global parameters that should be updated, or points in the user program where the data partitioning can be adjusted based on those policies. Our results show gains of up to 1.9× in the scenarios considered.},
  doi      = {https://doi.org/10.1016/j.jpdc.2018.02.030},
  keywords = {Performance diagnosis, Dynamic reconfiguration, Spark},
  url      = {http://www.sciencedirect.com/science/article/pii/S0743731518301084},
}

@InProceedings{lascasas2016bigdataarch,
  author    = {Pedro H. B. {Las-Casas} and Vinicius {Dias} and Wagner {Meira} and Dorgival {Guedes}},
  title     = {A Big Data Architecture for Security Data and Its Application to Phishing Characterization},
  booktitle = {2016 IEEE 2nd International Conference on Big Data Security on Cloud (BigDataSecurity)},
  year      = {2016},
  pages     = {36-41},
  month     = {April},
  doi       = {10.1109/BigDataSecurity-HPSC-IDS.2016.44},
  keywords  = {Big Data;computer crime;unsolicited e-mail;Big Data architecture;security data;phishing characterization;Internet;cybersecurity problems;spam;global honeynet;Sparks;Big data;Computer architecture;Computer security;Electronic mail;Scalability;architecture;cybersecurity;spam;phishing;hadoop;spark},
}

@InProceedings{ribeiro2016preferencequeries,
  author    = {Ribeiro, Marcos Roberto and Pereira, Fab\'{\i}ola Souza F. and Dias, Vin\'{\i}cius Vitor S.},
  title     = {Efficient Algorithms for Processing Preference Queries},
  booktitle = {Proceedings of the 31st Annual ACM Symposium on Applied Computing},
  year      = {2016},
  series    = {SAC '16},
  pages     = {972--979},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2851659},
  doi       = {10.1145/2851613.2851659},
  isbn      = {978-1-4503-3739-7},
  keywords  = {SQL extension, preferences, query language, relational algebra},
  location  = {Pisa, Italy},
  numpages  = {8},
  url       = {http://doi.acm.org/10.1145/2851613.2851659},
}

@Article{rocha2016watershedng,
  author   = {Rocha, Rodrigo and Hott, Bruno and Dias, Vinícius and Ferreira, Renato and Meira, Wagner and Guedes, Dorgival},
  title    = {Watershed-ng: an extensible distributed stream processing framework},
  journal  = {Concurrency and Computation: Practice and Experience},
  year     = {2016},
  volume   = {28},
  number   = {8},
  pages    = {2487-2502},
  abstract = {Summary Most high-performance data processing (a.k.a. big data) systems allow users to express their computation using abstractions (like MapReduce), which simplify the extraction of parallelism from applications. Most frameworks, however, do not allow users to specify how communication must take place: That element is deeply embedded into the run-time system abstractions, making changes hard to implement. In this work, we describe Wathershed-ng, our re-engineering of the Watershed system, a framework based on the filter–stream paradigm and originally focused on continuous stream processing. Like other big-data environments, Watershed provided object-oriented abstractions to express computation (filters), but the implementation of streams was a run-time system element. By isolating stream functionality into appropriate classes, combination of communication patterns and reuse of common message handling functions (like compression and blocking) become possible. The new architecture even allows the design of new communication patterns, for example, allowing users to choose MPI, TCP, or shared memory implementations of communication channels as their problem demands. Applications designed for the new interface showed reductions in code size on the order of 50\% and above in some cases. The performance results also showed significant improvements, because some implementation bottlenecks were removed in the re-engineering process. Copyright © 2016 John Wiley \& Sons, Ltd.},
  doi      = {10.1002/cpe.3779},
  eprint   = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/cpe.3779},
  keywords = {distributed systems, watershed, big data, frameworks},
  url      = {https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.3779},
}

@InProceedings{hussein2017arabesquedemo,
  author    = {Hussein, Eslam and Ghanem, Abdurrahman and Dias, Vinicius and Teixeira, Carlos H.C. and AbuOda, Ghadeer and Serafini, Marco and Siganos, Georgos and De Francisci Morales, Gianmarco and Aboulnaga, Ashraf and Zaki, Mohammed},
  title     = {Graph Data Mining with Arabesque},
  booktitle = {Proceedings of the 2017 ACM International Conference on Management of Data},
  year      = {2017},
  series    = {SIGMOD '17},
  pages     = {1647--1650},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {3058742},
  doi       = {10.1145/3035918.3058742},
  isbn      = {978-1-4503-4197-4},
  keywords  = {filter-process, graph exploration, think like an embedding},
  location  = {Chicago, Illinois, USA},
  numpages  = {4},
  url       = {http://doi.acm.org/10.1145/3035918.3058742},
}

@InProceedings{dias2016dynamicreconfiguration,
  author    = {Vinicius {Dias} and Wagner {Meira} and Dorgival {Guedes}},
  title     = {Dynamic Reconfiguration of Data Parallel Programs},
  booktitle = {2016 28th International Symposium on Computer Architecture and High Performance Computing (SBAC-PAD)},
  year      = {2016},
  pages     = {190-197},
  month     = {Oct},
  doi       = {10.1109/SBAC-PAD.2016.32},
  keywords  = {application program interfaces;data handling;parallel programming;software performance evaluation;data parallel program dynamic reconfiguration;data science;parallel processing environments;abstract programming interfaces;Spark;distributed program development;multiple run-time strategy;performance degradation;data partitioning;parallelism degree;Sparks;Parallel processing;Partitioning algorithms;Measurement;Itemsets;Algorithm design and analysis;Data mining;data parallel;spark;performance;framework;adaptive execution},
}

@InProceedings{dias2016diagnosingbottlenecks,
  author    = {Vinicius {Dias} and Rubens {Moreira} and Wagner {Meira Jr.} and Dorgival {Guedes}},
  title     = {Diagnosing Performance Bottlenecks in Massive Data Parallel Programs},
  booktitle = {2016 16th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing (CCGrid)},
  year      = {2016},
  pages     = {273-276},
  month     = {May},
  doi       = {10.1109/CCGrid.2016.81},
  keywords  = {data handling;parallel programming;program diagnostics;software performance evaluation;performance bottleneck diagnosis;massive data parallel programs;Spark programming environment;Parallel processing;Sparks;Data models;Partitioning algorithms;Layout;Itemsets;Algorithm design and analysis;performance evaluation;performance diagnosis;data parallel;distributed processing;load balancing;job optimization;task placement},
}

@InProceedings{lascasas2014hadoopextension,
  author    = {Pedro H. B. {Las-Casas} and Vinicius {Dias} and Renato {Ferreira} and Wagner {Meira Jr.} and Dorgival {Guedes}},
  title     = {A Hadoop Extension to Process Mail Folders and its Application to a Spam Dataset},
  booktitle = {2014 International Symposium on Computer Architecture and High Performance Computing Workshop},
  year      = {2014},
  pages     = {108-113},
  month     = {Oct},
  doi       = {10.1109/SBAC-PADW.2014.25},
  keywords  = {Big Data;data mining;Internet;unsolicited e-mail;Hadoop extension;mail folder;spam dataset;Web 2.0;e-mail;spam traffic;data mining;big data processing;Electronic mail;Postal services;Educational institutions;Internet;Programming;Servers;mail;spam;hadoop},
}

@Comment{jabref-meta: databaseType:bibtex;}

Comment{jabref-meta: databaseType:bibtex;}
